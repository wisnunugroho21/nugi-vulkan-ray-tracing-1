#version 460

// ------------- layout -------------

#define NSAMPLE 4
#define SHININESS 64

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D targetImage[NSAMPLE];

struct Sphere {
  vec3 center;
  float radius;

  uint materialType;
  uint materialIndex;
};

struct Triangle {
  vec3 point0;
  vec3 point1;
  vec3 point2;
};

struct Object {
  Triangle triangle;
  uint materialType;
  uint materialIndex;
};

struct Lambertian {
  vec3 albedoColor;
};

struct Light {
  Triangle triangle;
  vec3 color;
};

struct BvhNode {
  int leftNode;
  int rightNode;
  int leftObjIndex;
  int rightObjIndex;

  vec3 maximum;
  vec3 minimum;
};

layout(set = 0, binding = 1) uniform readonly GlobalUbo {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
  vec3 background;
} ubo;

layout(set = 0, binding = 2) buffer readonly ObjectSsbo {
  Object objects[100];
};

layout(set = 0, binding = 3) buffer readonly BvhSsbo {
  BvhNode bvhNodes[100];
};

layout(set = 0, binding = 4) buffer readonly materialSsbo {
  Lambertian lambertians[100];
};

layout(set = 0, binding = 5) buffer readonly lightSsbo {
  Light lights[100];
};

layout(push_constant) uniform Push {
  uint randomSeed;
} push;

// ------------- pre-defined parameter -------------

float pi = 3.14159265359;

// ------------- struct ------------- 

struct Ray {
  vec3 origin;
  vec3 direction;
};

struct FaceNormal {
  bool frontFace;
  vec3 normal;
};

struct MaterialHitRecord {
  uint materialType;
  uint materialIndex;
};

struct HitRecord {
  bool isHit;
  uint objIndex;

  float t;
  vec3 point;
  vec2 uv;

  FaceNormal faceNormal;
};

struct ShadeRecord {
  vec3 colorAttenuation;
  vec3 colorEmitted;

  Ray raySpecular;
};

// ------------- function ------------- 

#include "helper/random.glsl"

// Return true if the vector is close to zero in all dimensions.
bool nearZero(vec3 xyz) {
  return (abs(xyz.x) < 1e-8) && (abs(xyz.y) < 1e-8) && (abs(xyz.z) < 1e-8);
}

// Use Schlick's approximation for reflectance.
float reflectance(float cosine, float refIdx) {
  float r0 = (1 - refIdx) / (1 + refIdx);
  r0 = r0 * r0;
  return r0 + (1 - r0) * pow((1 - cosine), 5);
}

vec3 rayAt(Ray r, float t) {
  return r.origin + t * r.direction;
}

// ------------- Hit Shape -------------

FaceNormal setFaceNormal(vec3 r_direction, vec3 outwardNormal) {
  FaceNormal faceNormal;

  faceNormal.frontFace = dot(r_direction, outwardNormal) < 0.0;
  faceNormal.normal = faceNormal.frontFace ? outwardNormal : -1.0 * outwardNormal;

  return faceNormal;
}

HitRecord hitTriangle(Triangle obj, Ray r, float tMin, float tMax) {
  HitRecord hit;
  hit.isHit = false;

  float kEpsilon = 0.0001;

  vec3 v0v1 = obj.point1 - obj.point0;
  vec3 v0v2 = obj.point2 - obj.point0;
  vec3 pvec = cross(r.direction, v0v2);
  float det = dot(v0v1, pvec);
  
  if (abs(det) < kEpsilon) {
    return hit;
  }
    
  float invDet = 1.0 / det;

  vec3 tvec = r.origin - obj.point0;
  float u = dot(tvec, pvec) * invDet;
  if (u < 0.0 || u > 1.0) {
    return hit;
  }

  vec3 qvec = cross(tvec, v0v1);
  float v = dot(r.direction, qvec) * invDet;
  if (v < 0.0 || u + v > 1.0) {
    return hit;
  }
  
  float t = dot(v0v2, qvec) * invDet;

  if (t <= kEpsilon) {
    return hit;
  }

  if (t < tMin || t > tMax) {
    return hit;
  }

  hit.isHit = true;
  hit.t = t;
  hit.point = rayAt(r, t);
  hit.uv = vec2(u, v);

  vec3 outwardNormal = normalize(cross(v0v1, v0v2));
  hit.faceNormal = setFaceNormal(r.direction, outwardNormal);

  return hit;
}

vec2 getSphereUV(vec3 point) {
  float theta = acos(-1.0 * point.y);
  float phi = atan(point.x, -1.0 * point.z) + pi; // HLSL atan2(x,y) == GLSL atan(y,x)

  float u = phi / (2.0 * pi);
  float v = theta / pi;

  return vec2(u, v);
}

HitRecord hitSphere(Sphere obj, Ray r, float tMin, float tMax) {
  HitRecord hit;
  hit.isHit = false;

  vec3 oc = r.origin - obj.center;

  float a = dot(r.direction, r.direction);
  float half_b = dot(oc, r.direction);
  float c = dot(oc, oc) - obj.radius * obj.radius;

  float discriminant = half_b * half_b - a * c;

  if (discriminant < 0.0) {
    return hit;
  }

  float sqrtd = sqrt(discriminant);

  // Find the nearest root that lies in the acceptable range.
  float root = (-half_b - sqrtd) / a;
  if (root < tMin || root > tMax) {
    root = (-half_b + sqrtd) / a;
    if (root < tMin || root > tMax) {
      return hit;
    }
  }

  hit.isHit = true;
  hit.t = root;
  hit.point = rayAt(r, hit.t);
  hit.uv = getSphereUV(hit.point);

  vec3 outwardNormal = (hit.point - obj.center) / obj.radius;
  hit.faceNormal = setFaceNormal(r.direction, outwardNormal);
  
  return hit;
}

bool intersectAABB(Ray r, vec3 boxMin, vec3 boxMax) {
  vec3 tMin = (boxMin - r.origin) / r.direction;
  vec3 tMax = (boxMax - r.origin) / r.direction;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);

  return tNear < tFar;
}

HitRecord hitBvh(Ray r, float tMin, float tMax) {
  HitRecord hit;
  hit.isHit = false;
  hit.t = tMax;

  int stack[30];
  int stackIndex = 0;

  stack[0] = 0;
  stackIndex++;

  while(stackIndex > 0 && stackIndex <= 30) {
    stackIndex--;
    int currentNode = stack[stackIndex];
    if (currentNode < 0) {
      continue;
    }

    if (!intersectAABB(r, bvhNodes[currentNode].minimum, bvhNodes[currentNode].maximum)) {
      continue;
    }

    int objIndex = bvhNodes[currentNode].leftObjIndex;
    if (objIndex >= 0) {
      HitRecord tempHit = hitTriangle(objects[objIndex].triangle, r, tMin, hit.t);

      if (tempHit.isHit) {
        hit = tempHit;
        hit.objIndex = objIndex;
      }
    }

    objIndex = bvhNodes[currentNode].rightObjIndex;    
    if (objIndex >= 0) {
      HitRecord tempHit = hitTriangle(objects[objIndex].triangle, r, tMin, hit.t);

      if (tempHit.isHit) {
        hit = tempHit;
        hit.objIndex = objIndex;
      }
    }

    int bvhNode = bvhNodes[currentNode].leftNode;
    if (bvhNode >= 0) {
      stack[stackIndex] = bvhNode;
      stackIndex++;
    }

    bvhNode = bvhNodes[currentNode].rightNode;
    if (bvhNode >= 0) {
      stack[stackIndex] = bvhNode;
      stackIndex++;
    }
  }

  return hit;
}

HitRecord hitLightList(Ray r, float tMin, float tMax) {
  HitRecord hit;
  hit.isHit = false;
  hit.t = tMax;

  for (int i = 0; i < 2; i++) {
    HitRecord tempHit = hitTriangle(lights[i].triangle, r, tMin, hit.t);
    if (tempHit.isHit) {
      hit = tempHit;
      hit.objIndex = i;
    }
  }

  return hit;
}

HitRecord hitTriangleList(Ray r, float tMin, float tMax) {
  HitRecord hit;
  hit.isHit = false;
  hit.t = tMax;

  for (int i = 0; i < 22; i++) {
    HitRecord tempHit = hitTriangle(objects[i].triangle, r, tMin, hit.t);
    if (tempHit.isHit) {
      hit = tempHit;
      hit.objIndex = i;
    }
  }

  return hit;
}

/* HitRecord hitSphereList(Ray r, float tMin, float tMax) {
  HitRecord hit;
  hit.isHit = false;
  hit.t = tMax;
  
  for (int i = 0; i < 4; i++) {
    HitRecord tempHit = hitSphere(spheres[i], r, tMin, hit.t);
    if (tempHit.isHit) {
      hit = tempHit;
    }
  }

  return hit;
} */

// ------------- Denoiser Cosine ------------- 

vec3[3] buildOnb(vec3 normal) {
  vec3 a = abs(normalize(normal).x) > 0.9 ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);

  vec3 z = normalize(normal);
  vec3 y = normalize(cross(z, a));
  vec3 x = cross(z, y);

  return vec3[3](x, y, z);
}

float cosineGetPdfValue(vec3 normal, vec3 direction) {
  float cosine = dot(normalize(direction), normal);
  return cosine < 0 ? 0 : cosine / pi;
}

vec3 cosineGenerateRandom(vec3[3] globalOnb) {
  vec3 source = randomCosineDirection(1, 2);
  return source.x * globalOnb[0] + source.y * globalOnb[1] + source.z * globalOnb[2];
}

// ------------- Denoiser Shape ------------- 

float areaTriangle(Triangle obj) {
  vec3 v0v1 = obj.point1 - obj.point0;
  vec3 v0v2 = obj.point2 - obj.point0;

  vec3 pvec = cross(v0v1, v0v2);
  return 0.5 * sqrt(dot(pvec, pvec)); 
}

float triangleGetPdfValue(Triangle obj, Ray r) {
  HitRecord hit = hitTriangle(obj, r, 0.001, 1000.0);
  if (!hit.isHit) {
    return 0.0;
  }

  float cosine = abs(dot(r.direction, hit.faceNormal.normal) / length(r.direction));
  float distanceSquared = hit.t * hit.t * dot(r.direction, r.direction);
  float area = areaTriangle(obj);

  return distanceSquared / (cosine * area);
}

vec3 triangleGenerateRandom(Triangle obj, vec3 origin) {
  vec3 a = obj.point1 - obj.point0;
  vec3 b = obj.point2 - obj.point0;

  float u1 = randomFloat(1);
  float u2 = randomFloat(2);

  if (u1 + u2 > 1) {
    u1 = 1 - u1;
    u2 = 1 - u2;
  }

  vec3 randomTriangle = u1 * a + u2 * b + obj.point0;
  return randomTriangle - origin;
}

float triangleListGetPdfValue(Ray r) {
  float weight = 1.0 / 2;
  float sum = 0.0;

  for (int i = 0; i < 2; i++) {
    sum += weight * triangleGetPdfValue(lights[i].triangle, r);
  }

  return sum;
}

vec3 triangleListGenerateRandom(vec3 origin) {
  return triangleGenerateRandom(lights[randomInt(0, 1, 1)].triangle, origin);
}

// ------------- Denoiser Phong -------------

float phongGetPdfValue(vec3 reflected, vec3 direction, int shininess) {
  float cosine = max(dot(normalize(direction), reflected), 0);
  return (shininess + 2) / (2 * pi) * pow(cosine, shininess);
}

vec3 phongGenerateRandom(vec3[3] globalOnb, int shininess) {
  vec3 source = randomPhong(1, 2, shininess);
  return source.x * globalOnb[0] + source.y * globalOnb[1] + source.z * globalOnb[2];
}

// ------------- Material -------------

ShadeRecord shadeLambertian(Ray r, HitRecord hit, uint materialIndex) {
  ShadeRecord scat;
  
  vec3[3] globalOnb = buildOnb(hit.faceNormal.normal);
  scat.raySpecular.origin = hit.point;

  int chooseRandom = randomInt(0, 1, 0);
  switch(chooseRandom) {
    case 0: scat.raySpecular.direction = triangleListGenerateRandom(hit.point); break;
    case 1: scat.raySpecular.direction = cosineGenerateRandom(globalOnb); break;
  }

  float pdfVal = 0.5 * triangleListGetPdfValue(scat.raySpecular) + 0.5 * cosineGetPdfValue(globalOnb[2], scat.raySpecular.direction);

  float cosine = dot(hit.faceNormal.normal, normalize(scat.raySpecular.direction));
  vec3 reflectedLight = lambertians[materialIndex].albedoColor / pi * max(cosine, 0.0);

  scat.colorAttenuation = reflectedLight / pdfVal;
  return scat;
}

ShadeRecord shadeMetal(Ray r, HitRecord hit, uint materialIndex) {
  ShadeRecord scat;

  vec3 unitDirection = normalize(r.direction);

  vec3 reflected = reflect(unitDirection, hit.faceNormal.normal);
  vec3[3] globalOnb = buildOnb(reflected);

  scat.raySpecular.origin = hit.point;
  scat.raySpecular.direction = phongGenerateRandom(globalOnb, SHININESS);

  float pdfVal = phongGetPdfValue(reflected, scat.raySpecular.direction, SHININESS);

  vec3 halAngle = normalize(scat.raySpecular.direction - unitDirection);
  float blinnTerm = max(dot(hit.faceNormal.normal, halAngle), 0.0);
  float specularBrdf = (SHININESS + 2) / (2 * pi) * pow(blinnTerm, SHININESS);

  float cosine = dot(hit.faceNormal.normal, normalize(scat.raySpecular.direction));
  vec3 reflectedLight = lambertians[materialIndex].albedoColor * specularBrdf * max(cosine, 0.0);

  scat.colorAttenuation = reflectedLight / pdfVal;
  return scat;
}

ShadeRecord shadeDielectric(Ray r, HitRecord hit) {
  ShadeRecord scat;

  float indexOfRefraction = 1.5;
  float refractionRatio = hit.faceNormal.frontFace ? (1.0 / indexOfRefraction) : indexOfRefraction;

  vec3 unitDirection = normalize(r.direction);
  float cosTheta = min(dot(-1.0 * unitDirection, hit.faceNormal.normal), 1.0);
  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

  bool cannotRefract = refractionRatio * sinTheta > 1.0;
  vec3 direction;

  if (cannotRefract || reflectance(cosTheta, refractionRatio) > randomFloat(0)) {
    direction = reflect(unitDirection, hit.faceNormal.normal);
  } else {
    direction = refract(unitDirection, hit.faceNormal.normal, refractionRatio);
  }

  scat.raySpecular.origin = hit.point;
  scat.raySpecular.direction = direction;

  scat.colorAttenuation = vec3(1.0, 1.0, 1.0);
  return scat;
}

// ------------- Main -------------

void main() {
  uint imgIndex = gl_GlobalInvocationID.z;
  uvec2 imgPosition = gl_GlobalInvocationID.xy;

  vec2 imgSize = vec2(imageSize(targetImage[imgIndex]));

  float noiseX = randomFloat(1);
  float noiseY = randomFloat(2);

  vec2 noiseUV = vec2(noiseX, noiseY);
  vec2 uv = (imgPosition + noiseUV) / imgSize;

  Ray curRay;
  curRay.origin = ubo.origin;
  curRay.direction = ubo.lowerLeftCorner + uv.x * ubo.horizontal - uv.y * ubo.vertical - ubo.origin;

  vec4 lastNum = vec4(0.0, 0.0, 0.0, 0.0);
  mat4 rayTransform = mat4(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
  );
  
  for(int i = 0; i < 50; i++) {
    HitRecord hit = hitBvh(curRay, 0.001, 1000000.0);
    if (!hit.isHit) {
      lastNum = vec4(ubo.background, 1.0);
      break;
    }

    HitRecord hittedLight = hitLightList(curRay, 0.001, hit.t);
    if (hittedLight.isHit) {
      lastNum = vec4(lights[hittedLight.objIndex].color, 1.0);
      break;
    }

    ShadeRecord scat;
    if (objects[hit.objIndex].materialType == 1) {
      scat = shadeLambertian(curRay, hit, objects[hit.objIndex].materialIndex);
    } else if (objects[hit.objIndex].materialType == 2) {
      scat = shadeMetal(curRay, hit, objects[hit.objIndex].materialIndex);
    } else if (objects[hit.objIndex].materialType == 3) {
      scat = shadeDielectric(curRay, hit);
    }

    mat4 emitTransf = mat4(
      1.0, 0.0, 0.0, scat.colorEmitted.x,
      0.0, 1.0, 0.0, scat.colorEmitted.y,
      0.0, 0.0, 1.0, scat.colorEmitted.z,
      0.0, 0.0, 0.0, 1.0
    );

    mat4 attentTransf = mat4(
      scat.colorAttenuation.x, 0.0, 0.0, 0.0,
      0.0, scat.colorAttenuation.y, 0.0, 0.0,
      0.0, 0.0, scat.colorAttenuation.z, 0.0,
      0.0, 0.0, 0.0, 1.0
    );

    rayTransform = emitTransf * attentTransf * rayTransform;
    curRay = scat.raySpecular;
  }
  
  vec4 curColor = rayTransform * lastNum;
  imageStore(targetImage[imgIndex], ivec2(imgPosition), curColor);
}