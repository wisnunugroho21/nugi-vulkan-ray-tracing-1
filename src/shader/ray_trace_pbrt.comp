#version 460

// ------------- layout -------------

#define SHININESS 64
#define KEPSILON 0.00001

#include "core/struct.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D targetImage;
layout(set = 0, binding = 1) uniform sampler2D textureSampler[1];

layout(set = 0, binding = 2) uniform readonly GlobalUbo {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
  vec3 background;
  uint numLights;
} ubo;

layout(set = 0, binding = 3) buffer readonly ObjectSsbo {
  Object objects[];
};

layout(set = 0, binding = 4) buffer readonly ObjectBvhSsbo {
  BvhNode objectBvhNodes[];
};

layout(set = 0, binding = 5) buffer readonly PrimitiveSsbo {
  Primitive primitives[];
};

layout(set = 0, binding = 6) buffer readonly PrimitiveBvhSsbo {
  BvhNode primitiveBvhNodes[];
};

layout(set = 0, binding = 7) buffer readonly LightSsbo {
  Light lights[];
};

layout(set = 0, binding = 8) buffer readonly LightBvhSsbo {
  BvhNode lightBvhNodes[];
};

layout(set = 0, binding = 9) buffer readonly MaterialSsbo {
  Material materials[];
};

layout(set = 0, binding = 10) buffer readonly TransformationSsbo {
  Transformation transformations[];
};

layout(push_constant) uniform Push {
  uint randomSeed;
} push;

uvec2 imgSize = uvec2(imageSize(targetImage));

#include "core/random.glsl"
#include "core/trace.glsl"
#include "core/ggx.glsl"
#include "core/shape.glsl"
#include "core/material.glsl"
#include "core/render.glsl"

// ------------- Material -------------

ShadeRecord indirectGgxShade(Ray r, HitRecord hit, uint materialIndex, vec3 materialColor, uint additionalRandomSeed) {
  ShadeRecord scat;
  scat.nextRay.origin = hit.point;

  vec3 unitViewDirection = normalize(r.direction);
  float f0 = 0.16 * (materials[materialIndex].fresnelReflect * materials[materialIndex].fresnelReflect);

  vec3[3] globalOnb = buildOnb(reflect(unitViewDirection, hit.normal));
  scat.nextRay.direction = ggxGenerateRandom(globalOnb, materials[materialIndex].roughness, additionalRandomSeed);

  vec3 H = normalize(scat.nextRay.direction - r.direction); // half vector

  float NoL = max(dot(hit.normal, normalize(scat.nextRay.direction)), 0.001f);
  float NoV = max(dot(hit.normal, -1.0f * unitViewDirection), 0.001f);
  float NoH = max(dot(hit.normal, H), 0.001f);
  float VoH = max(dot(unitViewDirection, H), 0.001f);

  float brdf = ggxBrdfValue(NoV, NoL, NoH, VoH, f0, materials[materialIndex].roughness);

  scat.pdf = ggxPdfValue(NoH, NoL, materials[materialIndex].roughness);
  scat.radiance = partialIntegrand(materialColor, brdf, NoL);
  
  return scat;
}

ShadeRecord indirectLambertShade(Ray r, HitRecord hit, uint materialIndex, vec3 materialColor, uint additionalRandomSeed) {
  ShadeRecord scat;
  scat.nextRay.origin = hit.point;

  uint triangleRand = randomUint(0, ubo.numLights, additionalRandomSeed);

  if (triangleRand < 2) {
    scat.nextRay.direction = triangleGenerateRandom(lights[triangleRand].triangle, hit.point, additionalRandomSeed);
  } else {
    scat.nextRay.direction = lambertGenerateRandom(buildOnb(hit.normal), additionalRandomSeed);
  }

  float NoL = max(dot(hit.normal, normalize(scat.nextRay.direction)), 0.001f);
  float brdf = lambertBrdfValue();

  scat.pdf = lambertPdfValue(NoL);
  scat.radiance = partialIntegrand(materialColor, brdf, NoL); 
  
  return scat;
}

ShadeRecord directGgxShade(Ray r, HitRecord hit, uint materialIndex, vec3 materialColor, uint additionalRandomSeed) {
  ShadeRecord scat;
  Ray shadowRay;

  scat.radiance = vec3(0.0f);
  scat.pdf = 0.0f;

  shadowRay.origin = hit.point;
  uint lightIndex = randomUint(0, ubo.numLights - 1u, additionalRandomSeed);

  shadowRay.direction = triangleGenerateRandom(lights[lightIndex].triangle, hit.point, additionalRandomSeed);
  HitRecord occludedHit = hitObjectBvh(shadowRay, 0.001f, 1.0f);

  if (!occludedHit.isHit) {
    vec3 unitLightDirection = normalize(shadowRay.direction);
    vec3 hittedLightFaceNormal = triangleFaceNormal(lights[lightIndex].triangle, unitLightDirection);

    float NloL = max(dot(hittedLightFaceNormal, -1.0f * unitLightDirection), 0.001f);
    float NoL = max(dot(hit.normal, unitLightDirection), 0.001f);    

    vec3 unitViewDirection = normalize(r.direction);
    vec3 H = normalize(shadowRay.direction - r.direction); // half vector

    float f0 = 0.16 * (materials[materialIndex].fresnelReflect * materials[materialIndex].fresnelReflect);
    
    float NoV = max(dot(hit.normal, -1.0f * unitViewDirection), 0.001f);
    float NoH = max(dot(hit.normal, H), 0.001f);
    float VoH = max(dot(unitViewDirection, H), 0.001f);

    float brdf = ggxBrdfValue(NoV, NoL, NoH, VoH, f0, materials[materialIndex].roughness);
    float sqrDistance = dot(shadowRay.direction, shadowRay.direction);
    float area = areaTriangle(lights[lightIndex].triangle);

    scat.pdf = ggxPdfValue(NoH, NoL, materials[materialIndex].roughness);
    scat.radiance = partialIntegrand(materialColor, brdf, NoL) * Gfactor(NloL, sqrDistance, area) * lights[lightIndex].color;
  }  

  return scat;
}

ShadeRecord directLambertShade(Ray r, HitRecord hit, uint materialIndex, vec3 materialColor, uint additionalRandomSeed) {
  ShadeRecord scat;
  Ray shadowRay;

  scat.radiance = vec3(0.0f);
  scat.pdf = 0.0f;

  shadowRay.origin = hit.point;
  uint lightIndex = randomUint(0, ubo.numLights - 1u, additionalRandomSeed);

  shadowRay.direction = triangleGenerateRandom(lights[lightIndex].triangle, hit.point, additionalRandomSeed);
  HitRecord occludedHit = hitObjectBvh(shadowRay, 0.001f, 1.0f);

  if (!occludedHit.isHit) {
    vec3 unitLightDirection = normalize(shadowRay.direction);
    vec3 hittedLightFaceNormal = triangleFaceNormal(lights[lightIndex].triangle, unitLightDirection);

    float NloL = max(dot(hittedLightFaceNormal, -1.0f * unitLightDirection), 0.001f);
    float NoL = max(dot(hit.normal, unitLightDirection), 0.001f);    

    float sqrDistance = dot(shadowRay.direction, shadowRay.direction);
    float area = areaTriangle(lights[lightIndex].triangle);
    float brdf = lambertBrdfValue();

    scat.pdf = lambertPdfValue(NoL);
    scat.radiance = partialIntegrand(materialColor, brdf, NoL) * Gfactor(NloL, sqrDistance, area) * lights[lightIndex].color;
  }  

  return scat;
}

// ------------- Main -------------

void main() {
  uvec2 imgPosition = gl_GlobalInvocationID.xy;

  float noiseX = randomFloat(0) * 2.0f - 1.0f;
  float noiseY = randomFloat(1) * 2.0f - 1.0f;

  vec2 uv = (imgPosition + vec2(noiseX, noiseY)) / imgSize;

  vec3 totalRadiance = vec3(0.0f);
  vec3 totalIndirect = vec3(1.0f);

  ShadeRecord indirectShadeResult, directShadeResult;
  Ray curRay;

  indirectShadeResult.pdf = 1.0f;
  curRay.origin = ubo.origin;
  curRay.direction = ubo.lowerLeftCorner + uv.x * ubo.horizontal - uv.y * ubo.vertical - ubo.origin;
  
  for(uint i = 0; i < 50; i++) {
    HitRecord hit = hitObjectBvh(curRay, 0.001f, 1000000.0f);
    if (!hit.isHit) {
      totalRadiance = totalRadiance + totalIndirect * ubo.background;
      break;
    }

    HitRecord hittedLight = hitLightBvh(curRay, 0.001f, hit.t);
    if (hittedLight.isHit) {
      if (i > 0u) {
        totalIndirect = totalIndirect * Gfactor(curRay, hittedLight);
      }

      totalRadiance = totalRadiance + totalIndirect * lights[hittedLight.hitIndex].color;
      break;
    }

    totalIndirect = totalIndirect / indirectShadeResult.pdf;
    uint materialIndex = primitives[hit.hitIndex].materialIndex;

    vec3 materialColor;
    if (materials[materialIndex].textureIndex == 0u) {
      materialColor = materials[materialIndex].baseColor;
    } else {
      materialColor = texture(textureSampler[materials[materialIndex].textureIndex - 1u], hit.uv).xyz;
    }

    if (materials[materialIndex].metallicness >= randomFloat(i)) {
      indirectShadeResult = indirectGgxShade(curRay, hit, materialIndex, materialColor, i);
      directShadeResult = directGgxShade(curRay, hit, materialIndex, materialColor, i);
    } else {
      indirectShadeResult = indirectLambertShade(curRay, hit, materialIndex, materialColor, i);
      directShadeResult = directLambertShade(curRay, hit, materialIndex, materialColor, i);
    }

    float totalPdf = directShadeResult.pdf + indirectShadeResult.pdf;

    totalRadiance = totalRadiance + totalIndirect * directShadeResult.radiance * directShadeResult.pdf / totalPdf;
    totalIndirect = totalIndirect * indirectShadeResult.radiance * indirectShadeResult.pdf / totalPdf;

    curRay = indirectShadeResult.nextRay;
  }
  
  imageStore(targetImage, ivec2(imgPosition), vec4(totalRadiance, 1.0f));
}