#version 460

// ------------- layout -------------

#define NSAMPLE 4
#define SHININESS 64
#define KEPSILON 0.00001

#include "core/struct.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 2) in;
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D targetImage[NSAMPLE];

layout(set = 0, binding = 1) uniform readonly GlobalUbo {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
  vec3 background;
} ubo;

layout(set = 0, binding = 2) buffer readonly ObjectSsbo {
  Object objects[100];
};

layout(set = 0, binding = 3) buffer readonly BvhSsbo {
  BvhNode bvhNodes[100];
};

layout(set = 0, binding = 4) buffer readonly materialSsbo {
  Material materials[100];
};

layout(set = 0, binding = 5) buffer readonly lightSsbo {
  Light lights[100];
};

layout(push_constant) uniform Push {
  uint randomSeed;
} push;

uvec2 imgSize = uvec2(imageSize(targetImage[0]));

#include "core/random.glsl"
#include "core/trace.glsl"
#include "core/ggx.glsl"
#include "core/shape.glsl"
#include "core/material.glsl"
#include "core/render.glsl"

// ------------- Material -------------

ShadeRecord indirectGgxShade(Ray r, HitRecord hit, uint materialIndex, uint additionalRandomSeed) {
  ShadeRecord scat;
  scat.raySpecular.origin = hit.point;

  vec3 unitViewDirection = normalize(r.direction);
  float f0 = 0.16 * (materials[materialIndex].fresnelReflect * materials[materialIndex].fresnelReflect);

  vec3[3] globalOnb = buildOnb(reflect(unitViewDirection, hit.faceNormal.normal));
  scat.raySpecular.direction = ggxGenerateRandom(globalOnb, materials[materialIndex].roughness, additionalRandomSeed);

  vec3 H = normalize(scat.raySpecular.direction - r.direction); // half vector

  float NoL = max(dot(hit.faceNormal.normal, normalize(scat.raySpecular.direction)), 0.001);
  float NoV = max(dot(hit.faceNormal.normal, -1.0 * unitViewDirection), 0.001);
  float NoH = max(dot(hit.faceNormal.normal, H), 0.001);
  float VoH = max(dot(unitViewDirection, H), 0.001);

  float brdf = ggxBrdfValue(NoV, NoL, NoH, VoH, f0, materials[materialIndex].roughness);

  scat.pdf = ggxPdfValue(NoH, NoL, materials[materialIndex].roughness);
  scat.colorAttenuation = partialIntegrand(materials[materialIndex].baseColor, brdf, NoL);
  
  return scat;
}

ShadeRecord indirectLambertShade(Ray r, HitRecord hit, uint materialIndex, uint additionalRandomSeed) {
  ShadeRecord scat;
  scat.raySpecular.origin = hit.point;

  if (randomInt(0, 1, 0, additionalRandomSeed) == 0) {
    int triangleRand = (randomInt(0, 1, 1, additionalRandomSeed) + randomInt(0, 1, 2, additionalRandomSeed)) % 2;
    scat.raySpecular.direction = triangleGenerateRandom(lights[triangleRand].triangle, hit.point, additionalRandomSeed);
  } else {
    vec3[3] globalOnb = buildOnb(hit.faceNormal.normal);
    scat.raySpecular.direction = lambertGenerateRandom(globalOnb, additionalRandomSeed);
  }

  float NoL = max(dot(hit.faceNormal.normal, normalize(scat.raySpecular.direction)), 0.001);
  float brdf = lambertBrdfValue();

  scat.pdf = lambertPdfValue(NoL);
  scat.colorAttenuation = partialIntegrand(materials[materialIndex].baseColor, brdf, NoL); 
  
  return scat;
}

ShadeRecord directGgxShade(Ray r, HitRecord hit, uint materialIndex, uint additionalRandomSeed) {
  ShadeRecord scat;
  Ray shadowRay;

  scat.colorAttenuation = vec3(0.0);
  scat.pdf = 0.0;

  shadowRay.origin = hit.point;
  int i = (randomInt(0, 1, 1, additionalRandomSeed) + randomInt(0, 1, 2, additionalRandomSeed)) % 2;

  shadowRay.direction = triangleGenerateRandom(lights[i].triangle, hit.point, additionalRandomSeed);
  HitRecord occludedHit = hitBvh(shadowRay, 0.001, 1000000.0);

  if (!occludedHit.isHit) {
    vec3 unitLightDirection = normalize(shadowRay.direction);
    FaceNormal hittedLightFaceNormal = triangleFaceNormal(lights[i].triangle, unitLightDirection);

    float NloL = max(dot(hittedLightFaceNormal.normal, -1.0 * unitLightDirection), 0.001);
    float NoL = max(dot(hit.faceNormal.normal, unitLightDirection), 0.001);    

    vec3 unitViewDirection = normalize(r.direction);
    vec3 H = normalize(shadowRay.direction - r.direction); // half vector

    float f0 = 0.16 * (materials[materialIndex].fresnelReflect * materials[materialIndex].fresnelReflect);
    
    float NoV = max(dot(hit.faceNormal.normal, -1.0 * unitViewDirection), 0.001);
    float NoH = max(dot(hit.faceNormal.normal, H), 0.001);
    float VoH = max(dot(unitViewDirection, H), 0.001);

    float brdf = ggxBrdfValue(NoV, NoL, NoH, VoH, f0, materials[materialIndex].roughness);
    float sqrDistance = dot(shadowRay.direction, shadowRay.direction);
    float area = areaTriangle(lights[i].triangle);

    scat.pdf = ggxPdfValue(NoH, NoL, materials[materialIndex].roughness);
    scat.colorAttenuation = integrandOverArea(materials[materialIndex].baseColor, brdf, NoL, NloL, sqrDistance, area) * lights[i].color;
  }  

  return scat;
}

ShadeRecord directLambertShade(Ray r, HitRecord hit, uint materialIndex, uint additionalRandomSeed) {
  ShadeRecord scat;
  Ray shadowRay;

  scat.colorAttenuation = vec3(0.0);
  scat.pdf = 0.0;

  shadowRay.origin = hit.point;
  int i = (randomInt(0, 1, 1, additionalRandomSeed) + randomInt(0, 1, 2, additionalRandomSeed)) % 2;

  shadowRay.direction = triangleGenerateRandom(lights[i].triangle, hit.point, additionalRandomSeed);
  HitRecord occludedHit = hitBvh(shadowRay, 0.001, 1000000.0);

  if (!occludedHit.isHit) {
    vec3 unitLightDirection = normalize(shadowRay.direction);
    FaceNormal hittedLightFaceNormal = triangleFaceNormal(lights[i].triangle, unitLightDirection);

    float NloL = max(dot(hittedLightFaceNormal.normal, -1.0 * unitLightDirection), 0.001);
    float NoL = max(dot(hit.faceNormal.normal, unitLightDirection), 0.001);    

    float sqrDistance = dot(shadowRay.direction, shadowRay.direction);
    float area = areaTriangle(lights[i].triangle);
    float brdf = lambertBrdfValue();

    scat.pdf = lambertPdfValue(NoL);
    scat.colorAttenuation = integrandOverArea(materials[materialIndex].baseColor, brdf, NoL, NloL, sqrDistance, area) * lights[i].color;
  }  

  return scat;
}

// ------------- Main -------------

void main() {
  uvec2 imgPosition = gl_GlobalInvocationID.xy;
  uint imgIndex = gl_GlobalInvocationID.z;

  float noiseX = randomFloat(1, 0) * 2.0 - 1.0;
  float noiseY = randomFloat(2, 0) * 2.0 - 1.0;

  vec2 noiseUV = vec2(noiseX, noiseY);
  vec2 uv = (imgPosition + noiseUV) / imgSize;

  vec3 totalAttenuation = vec3(0.0);
  vec3 totalIndirect = vec3(1.0);

  Ray curRay;
  ShadeRecord indirectScat;
  ShadeRecord directScat;  

  indirectScat.pdf = 1.0;
  curRay.origin = ubo.origin;
  curRay.direction = ubo.lowerLeftCorner + uv.x * ubo.horizontal - uv.y * ubo.vertical - ubo.origin;
  
  for(uint i = 0; i < 3; i++) {
    HitRecord hit = hitBvh(curRay, 0.001, 1000000.0);
    if (!hit.isHit) {
      totalAttenuation = totalAttenuation + totalIndirect * ubo.background;
      break;
    }

    HitRecord hittedLight = hitLightList(curRay, 0.001, hit.t);
    if (hittedLight.isHit) {
      if (i > 0) {
        totalIndirect = totalIndirect * radiance(curRay, hittedLight, hittedLight.objIndex);
      }

      totalAttenuation = totalAttenuation + totalIndirect * lights[hittedLight.objIndex].color;
      break;
    }

    uint materialIndex = objects[hit.objIndex].materialIndex;
    totalIndirect = totalIndirect / indirectScat.pdf;

    if (materials[materialIndex].metallicness >= randomFloat(0, i)) {
      indirectScat = indirectGgxShade(curRay, hit, materialIndex, i);
      directScat = directGgxShade(curRay, hit, materialIndex, i);
    } else {
      indirectScat = indirectLambertShade(curRay, hit, materialIndex, i);
      directScat = directLambertShade(curRay, hit, materialIndex, i);
    }

    float totalPdf = directScat.pdf + indirectScat.pdf;

    totalAttenuation = totalAttenuation + totalIndirect * directScat.colorAttenuation * directScat.pdf / totalPdf;
    totalIndirect = totalIndirect * indirectScat.colorAttenuation * indirectScat.pdf / totalPdf;

    curRay = indirectScat.raySpecular;
  }
  
  imageStore(targetImage[imgIndex], ivec2(imgPosition), vec4(totalAttenuation, 1.0));
}